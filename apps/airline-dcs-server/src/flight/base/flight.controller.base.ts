/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FlightService } from "../flight.service";
import { FlightCreateInput } from "./FlightCreateInput";
import { Flight } from "./Flight";
import { FlightFindManyArgs } from "./FlightFindManyArgs";
import { FlightWhereUniqueInput } from "./FlightWhereUniqueInput";
import { FlightUpdateInput } from "./FlightUpdateInput";
import { PassengerFindManyArgs } from "../../passenger/base/PassengerFindManyArgs";
import { Passenger } from "../../passenger/base/Passenger";
import { PassengerWhereUniqueInput } from "../../passenger/base/PassengerWhereUniqueInput";
import { StopFindManyArgs } from "../../stop/base/StopFindManyArgs";
import { Stop } from "../../stop/base/Stop";
import { StopWhereUniqueInput } from "../../stop/base/StopWhereUniqueInput";

export class FlightControllerBase {
  constructor(protected readonly service: FlightService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Flight })
  async createFlight(@common.Body() data: FlightCreateInput): Promise<Flight> {
    return await this.service.createFlight({
      data: data,
      select: {
        arrivalTime: true,
        createdAt: true,
        departureTime: true,
        destination: true,
        flightNumber: true,
        id: true,
        origin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Flight] })
  @ApiNestedQuery(FlightFindManyArgs)
  async flights(@common.Req() request: Request): Promise<Flight[]> {
    const args = plainToClass(FlightFindManyArgs, request.query);
    return this.service.flights({
      ...args,
      select: {
        arrivalTime: true,
        createdAt: true,
        departureTime: true,
        destination: true,
        flightNumber: true,
        id: true,
        origin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Flight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async flight(
    @common.Param() params: FlightWhereUniqueInput
  ): Promise<Flight | null> {
    const result = await this.service.flight({
      where: params,
      select: {
        arrivalTime: true,
        createdAt: true,
        departureTime: true,
        destination: true,
        flightNumber: true,
        id: true,
        origin: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Flight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFlight(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() data: FlightUpdateInput
  ): Promise<Flight | null> {
    try {
      return await this.service.updateFlight({
        where: params,
        data: data,
        select: {
          arrivalTime: true,
          createdAt: true,
          departureTime: true,
          destination: true,
          flightNumber: true,
          id: true,
          origin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Flight })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFlight(
    @common.Param() params: FlightWhereUniqueInput
  ): Promise<Flight | null> {
    try {
      return await this.service.deleteFlight({
        where: params,
        select: {
          arrivalTime: true,
          createdAt: true,
          departureTime: true,
          destination: true,
          flightNumber: true,
          id: true,
          origin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/passengers")
  @ApiNestedQuery(PassengerFindManyArgs)
  async findPassengers(
    @common.Req() request: Request,
    @common.Param() params: FlightWhereUniqueInput
  ): Promise<Passenger[]> {
    const query = plainToClass(PassengerFindManyArgs, request.query);
    const results = await this.service.findPassengers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,

        flight: {
          select: {
            id: true,
          },
        },

        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/passengers")
  async connectPassengers(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: PassengerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passengers: {
        connect: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/passengers")
  async updatePassengers(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: PassengerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passengers: {
        set: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/passengers")
  async disconnectPassengers(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: PassengerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passengers: {
        disconnect: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/stops")
  @ApiNestedQuery(StopFindManyArgs)
  async findStops(
    @common.Req() request: Request,
    @common.Param() params: FlightWhereUniqueInput
  ): Promise<Stop[]> {
    const query = plainToClass(StopFindManyArgs, request.query);
    const results = await this.service.findStops(params.id, {
      ...query,
      select: {
        airport: true,
        arrivalTime: true,
        createdAt: true,
        departureTime: true,

        flight: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stops")
  async connectStops(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: StopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stops: {
        connect: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stops")
  async updateStops(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: StopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stops: {
        set: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stops")
  async disconnectStops(
    @common.Param() params: FlightWhereUniqueInput,
    @common.Body() body: StopWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stops: {
        disconnect: body,
      },
    };
    await this.service.updateFlight({
      where: params,
      data,
      select: { id: true },
    });
  }
}
