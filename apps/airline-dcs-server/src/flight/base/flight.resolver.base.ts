/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Flight } from "./Flight";
import { FlightCountArgs } from "./FlightCountArgs";
import { FlightFindManyArgs } from "./FlightFindManyArgs";
import { FlightFindUniqueArgs } from "./FlightFindUniqueArgs";
import { CreateFlightArgs } from "./CreateFlightArgs";
import { UpdateFlightArgs } from "./UpdateFlightArgs";
import { DeleteFlightArgs } from "./DeleteFlightArgs";
import { PassengerFindManyArgs } from "../../passenger/base/PassengerFindManyArgs";
import { Passenger } from "../../passenger/base/Passenger";
import { StopFindManyArgs } from "../../stop/base/StopFindManyArgs";
import { Stop } from "../../stop/base/Stop";
import { FlightService } from "../flight.service";
@graphql.Resolver(() => Flight)
export class FlightResolverBase {
  constructor(protected readonly service: FlightService) {}

  async _flightsMeta(
    @graphql.Args() args: FlightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Flight])
  async flights(@graphql.Args() args: FlightFindManyArgs): Promise<Flight[]> {
    return this.service.flights(args);
  }

  @graphql.Query(() => Flight, { nullable: true })
  async flight(
    @graphql.Args() args: FlightFindUniqueArgs
  ): Promise<Flight | null> {
    const result = await this.service.flight(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Flight)
  async createFlight(@graphql.Args() args: CreateFlightArgs): Promise<Flight> {
    return await this.service.createFlight({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Flight)
  async updateFlight(
    @graphql.Args() args: UpdateFlightArgs
  ): Promise<Flight | null> {
    try {
      return await this.service.updateFlight({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Flight)
  async deleteFlight(
    @graphql.Args() args: DeleteFlightArgs
  ): Promise<Flight | null> {
    try {
      return await this.service.deleteFlight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Passenger], { name: "passengers" })
  async findPassengers(
    @graphql.Parent() parent: Flight,
    @graphql.Args() args: PassengerFindManyArgs
  ): Promise<Passenger[]> {
    const results = await this.service.findPassengers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Stop], { name: "stops" })
  async findStops(
    @graphql.Parent() parent: Flight,
    @graphql.Args() args: StopFindManyArgs
  ): Promise<Stop[]> {
    const results = await this.service.findStops(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
